// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sylar/ns/ns_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto;
namespace sylar {
namespace ns {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NotifyMessage;
class NotifyMessageDefaultTypeInternal;
extern NotifyMessageDefaultTypeInternal _NotifyMessage_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class RegisterInfo;
class RegisterInfoDefaultTypeInternal;
extern RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
}  // namespace ns
}  // namespace sylar
PROTOBUF_NAMESPACE_OPEN
template<> ::sylar::ns::Node* Arena::CreateMaybeMessage<::sylar::ns::Node>(Arena*);
template<> ::sylar::ns::NodeInfo* Arena::CreateMaybeMessage<::sylar::ns::NodeInfo>(Arena*);
template<> ::sylar::ns::NotifyMessage* Arena::CreateMaybeMessage<::sylar::ns::NotifyMessage>(Arena*);
template<> ::sylar::ns::QueryRequest* Arena::CreateMaybeMessage<::sylar::ns::QueryRequest>(Arena*);
template<> ::sylar::ns::QueryResponse* Arena::CreateMaybeMessage<::sylar::ns::QueryResponse>(Arena*);
template<> ::sylar::ns::RegisterInfo* Arena::CreateMaybeMessage<::sylar::ns::RegisterInfo>(Arena*);
template<> ::sylar::ns::RegisterRequest* Arena::CreateMaybeMessage<::sylar::ns::RegisterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sylar {
namespace ns {

// ===================================================================

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 weight = 3;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sylar.ns.Node)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RegisterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.RegisterInfo) */ {
 public:
  RegisterInfo();
  virtual ~RegisterInfo();

  RegisterInfo(const RegisterInfo& from);
  RegisterInfo(RegisterInfo&& from) noexcept
    : RegisterInfo() {
    *this = ::std::move(from);
  }

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterInfo*>(
               &_RegisterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterInfo* other);
  friend void swap(RegisterInfo& a, RegisterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterInfo* New() const final {
    return CreateMaybeMessage<RegisterInfo>(nullptr);
  }

  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterInfo& from);
  void MergeFrom(const RegisterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.RegisterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cmds = 2;
  int cmds_size() const;
  void clear_cmds();
  static const int kCmdsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmds(int index) const;
  void set_cmds(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cmds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cmds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cmds();

  // optional string domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);

  // optional .sylar.ns.Node node = 3;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 3;
  const ::sylar::ns::Node& node() const;
  ::sylar::ns::Node* release_node();
  ::sylar::ns::Node* mutable_node();
  void set_allocated_node(::sylar::ns::Node* node);

  // @@protoc_insertion_point(class_scope:sylar.ns.RegisterInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cmds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::sylar::ns::Node* node_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.RegisterRequest) */ {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RegisterRequest* other);
  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.RegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sylar.ns.RegisterInfo infos = 1;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 1;
  ::sylar::ns::RegisterInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >*
      mutable_infos();
  const ::sylar::ns::RegisterInfo& infos(int index) const;
  ::sylar::ns::RegisterInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:sylar.ns.RegisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo > infos_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(QueryRequest* other);
  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.QueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string domains = 1;
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 1;
  const std::string& domains(int index) const;
  std::string* mutable_domains(int index);
  void set_domains(int index, const std::string& value);
  void set_domains(int index, std::string&& value);
  void set_domains(int index, const char* value);
  void set_domains(int index, const char* value, size_t size);
  std::string* add_domains();
  void add_domains(const std::string& value);
  void add_domains(std::string&& value);
  void add_domains(const char* value);
  void add_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_domains();

  // @@protoc_insertion_point(class_scope:sylar.ns.QueryRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> domains_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NodeInfo* other);
  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.NodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sylar.ns.Node nodes = 3;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 3;
  ::sylar::ns::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >*
      mutable_nodes();
  const ::sylar::ns::Node& nodes(int index) const;
  ::sylar::ns::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >&
      nodes() const;

  // optional string domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);

  // optional uint32 cmd = 2;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sylar.ns.NodeInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(QueryResponse* other);
  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(nullptr);
  }

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.QueryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sylar.ns.NodeInfo infos = 1;
  int infos_size() const;
  void clear_infos();
  static const int kInfosFieldNumber = 1;
  ::sylar::ns::NodeInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
      mutable_infos();
  const ::sylar::ns::NodeInfo& infos(int index) const;
  ::sylar::ns::NodeInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:sylar.ns.QueryResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo > infos_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class NotifyMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.NotifyMessage) */ {
 public:
  NotifyMessage();
  virtual ~NotifyMessage();

  NotifyMessage(const NotifyMessage& from);
  NotifyMessage(NotifyMessage&& from) noexcept
    : NotifyMessage() {
    *this = ::std::move(from);
  }

  inline NotifyMessage& operator=(const NotifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyMessage& operator=(NotifyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotifyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyMessage*>(
               &_NotifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NotifyMessage* other);
  friend void swap(NotifyMessage& a, NotifyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyMessage* New() const final {
    return CreateMaybeMessage<NotifyMessage>(nullptr);
  }

  NotifyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyMessage& from);
  void MergeFrom(const NotifyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.NotifyMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto);
    return ::descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sylar.ns.NodeInfo dels = 1;
  int dels_size() const;
  void clear_dels();
  static const int kDelsFieldNumber = 1;
  ::sylar::ns::NodeInfo* mutable_dels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
      mutable_dels();
  const ::sylar::ns::NodeInfo& dels(int index) const;
  ::sylar::ns::NodeInfo* add_dels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
      dels() const;

  // repeated .sylar.ns.NodeInfo updates = 2;
  int updates_size() const;
  void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  ::sylar::ns::NodeInfo* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
      mutable_updates();
  const ::sylar::ns::NodeInfo& updates(int index) const;
  ::sylar::ns::NodeInfo* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
      updates() const;

  // @@protoc_insertion_point(class_scope:sylar.ns.NotifyMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo > dels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo > updates_;
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// optional string ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Node::ip() const {
  // @@protoc_insertion_point(field_get:sylar.ns.Node.ip)
  return ip_.GetNoArena();
}
inline void Node::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sylar.ns.Node.ip)
}
inline void Node::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sylar.ns.Node.ip)
}
inline void Node::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sylar.ns.Node.ip)
}
inline void Node::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sylar.ns.Node.ip)
}
inline std::string* Node::mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sylar.ns.Node.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Node::release_ip() {
  // @@protoc_insertion_point(field_release:sylar.ns.Node.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.Node.ip)
}

// optional uint32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::port() const {
  // @@protoc_insertion_point(field_get:sylar.ns.Node.port)
  return port_;
}
inline void Node::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
  // @@protoc_insertion_point(field_set:sylar.ns.Node.port)
}

// optional uint32 weight = 3;
inline bool Node::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::clear_weight() {
  weight_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Node::weight() const {
  // @@protoc_insertion_point(field_get:sylar.ns.Node.weight)
  return weight_;
}
inline void Node::set_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
  // @@protoc_insertion_point(field_set:sylar.ns.Node.weight)
}

// -------------------------------------------------------------------

// RegisterInfo

// optional string domain = 1;
inline bool RegisterInfo::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterInfo::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterInfo::domain() const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterInfo.domain)
  return domain_.GetNoArena();
}
inline void RegisterInfo::set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sylar.ns.RegisterInfo.domain)
}
inline void RegisterInfo::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sylar.ns.RegisterInfo.domain)
}
inline void RegisterInfo::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sylar.ns.RegisterInfo.domain)
}
inline void RegisterInfo::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sylar.ns.RegisterInfo.domain)
}
inline std::string* RegisterInfo::mutable_domain() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sylar.ns.RegisterInfo.domain)
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterInfo::release_domain() {
  // @@protoc_insertion_point(field_release:sylar.ns.RegisterInfo.domain)
  if (!has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterInfo::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.RegisterInfo.domain)
}

// repeated uint32 cmds = 2;
inline int RegisterInfo::cmds_size() const {
  return cmds_.size();
}
inline void RegisterInfo::clear_cmds() {
  cmds_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterInfo::cmds(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterInfo.cmds)
  return cmds_.Get(index);
}
inline void RegisterInfo::set_cmds(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cmds_.Set(index, value);
  // @@protoc_insertion_point(field_set:sylar.ns.RegisterInfo.cmds)
}
inline void RegisterInfo::add_cmds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cmds_.Add(value);
  // @@protoc_insertion_point(field_add:sylar.ns.RegisterInfo.cmds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
RegisterInfo::cmds() const {
  // @@protoc_insertion_point(field_list:sylar.ns.RegisterInfo.cmds)
  return cmds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
RegisterInfo::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.RegisterInfo.cmds)
  return &cmds_;
}

// optional .sylar.ns.Node node = 3;
inline bool RegisterInfo::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterInfo::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sylar::ns::Node& RegisterInfo::node() const {
  const ::sylar::ns::Node* p = node_;
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterInfo.node)
  return p != nullptr ? *p : *reinterpret_cast<const ::sylar::ns::Node*>(
      &::sylar::ns::_Node_default_instance_);
}
inline ::sylar::ns::Node* RegisterInfo::release_node() {
  // @@protoc_insertion_point(field_release:sylar.ns.RegisterInfo.node)
  _has_bits_[0] &= ~0x00000002u;
  ::sylar::ns::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::sylar::ns::Node* RegisterInfo::mutable_node() {
  _has_bits_[0] |= 0x00000002u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::sylar::ns::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sylar.ns.RegisterInfo.node)
  return node_;
}
inline void RegisterInfo::set_allocated_node(::sylar::ns::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.RegisterInfo.node)
}

// -------------------------------------------------------------------

// RegisterRequest

// repeated .sylar.ns.RegisterInfo infos = 1;
inline int RegisterRequest::infos_size() const {
  return infos_.size();
}
inline void RegisterRequest::clear_infos() {
  infos_.Clear();
}
inline ::sylar::ns::RegisterInfo* RegisterRequest::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.RegisterRequest.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >*
RegisterRequest::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.RegisterRequest.infos)
  return &infos_;
}
inline const ::sylar::ns::RegisterInfo& RegisterRequest::infos(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterRequest.infos)
  return infos_.Get(index);
}
inline ::sylar::ns::RegisterInfo* RegisterRequest::add_infos() {
  // @@protoc_insertion_point(field_add:sylar.ns.RegisterRequest.infos)
  return infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >&
RegisterRequest::infos() const {
  // @@protoc_insertion_point(field_list:sylar.ns.RegisterRequest.infos)
  return infos_;
}

// -------------------------------------------------------------------

// QueryRequest

// repeated string domains = 1;
inline int QueryRequest::domains_size() const {
  return domains_.size();
}
inline void QueryRequest::clear_domains() {
  domains_.Clear();
}
inline const std::string& QueryRequest::domains(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.QueryRequest.domains)
  return domains_.Get(index);
}
inline std::string* QueryRequest::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.QueryRequest.domains)
  return domains_.Mutable(index);
}
inline void QueryRequest::set_domains(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sylar.ns.QueryRequest.domains)
  domains_.Mutable(index)->assign(value);
}
inline void QueryRequest::set_domains(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sylar.ns.QueryRequest.domains)
  domains_.Mutable(index)->assign(std::move(value));
}
inline void QueryRequest::set_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sylar.ns.QueryRequest.domains)
}
inline std::string* QueryRequest::add_domains() {
  // @@protoc_insertion_point(field_add_mutable:sylar.ns.QueryRequest.domains)
  return domains_.Add();
}
inline void QueryRequest::add_domains(const std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::add_domains(std::string&& value) {
  domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::add_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sylar.ns.QueryRequest.domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRequest::domains() const {
  // @@protoc_insertion_point(field_list:sylar.ns.QueryRequest.domains)
  return domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRequest::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.QueryRequest.domains)
  return &domains_;
}

// -------------------------------------------------------------------

// NodeInfo

// optional string domain = 1;
inline bool NodeInfo::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::clear_domain() {
  domain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeInfo::domain() const {
  // @@protoc_insertion_point(field_get:sylar.ns.NodeInfo.domain)
  return domain_.GetNoArena();
}
inline void NodeInfo::set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sylar.ns.NodeInfo.domain)
}
inline void NodeInfo::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sylar.ns.NodeInfo.domain)
}
inline void NodeInfo::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sylar.ns.NodeInfo.domain)
}
inline void NodeInfo::set_domain(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  domain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sylar.ns.NodeInfo.domain)
}
inline std::string* NodeInfo::mutable_domain() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sylar.ns.NodeInfo.domain)
  return domain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_domain() {
  // @@protoc_insertion_point(field_release:sylar.ns.NodeInfo.domain)
  if (!has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return domain_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  domain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.NodeInfo.domain)
}

// optional uint32 cmd = 2;
inline bool NodeInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::clear_cmd() {
  cmd_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::cmd() const {
  // @@protoc_insertion_point(field_get:sylar.ns.NodeInfo.cmd)
  return cmd_;
}
inline void NodeInfo::set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_ = value;
  // @@protoc_insertion_point(field_set:sylar.ns.NodeInfo.cmd)
}

// repeated .sylar.ns.Node nodes = 3;
inline int NodeInfo::nodes_size() const {
  return nodes_.size();
}
inline void NodeInfo::clear_nodes() {
  nodes_.Clear();
}
inline ::sylar::ns::Node* NodeInfo::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.NodeInfo.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >*
NodeInfo::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.NodeInfo.nodes)
  return &nodes_;
}
inline const ::sylar::ns::Node& NodeInfo::nodes(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.NodeInfo.nodes)
  return nodes_.Get(index);
}
inline ::sylar::ns::Node* NodeInfo::add_nodes() {
  // @@protoc_insertion_point(field_add:sylar.ns.NodeInfo.nodes)
  return nodes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >&
NodeInfo::nodes() const {
  // @@protoc_insertion_point(field_list:sylar.ns.NodeInfo.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .sylar.ns.NodeInfo infos = 1;
inline int QueryResponse::infos_size() const {
  return infos_.size();
}
inline void QueryResponse::clear_infos() {
  infos_.Clear();
}
inline ::sylar::ns::NodeInfo* QueryResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.QueryResponse.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
QueryResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.QueryResponse.infos)
  return &infos_;
}
inline const ::sylar::ns::NodeInfo& QueryResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.QueryResponse.infos)
  return infos_.Get(index);
}
inline ::sylar::ns::NodeInfo* QueryResponse::add_infos() {
  // @@protoc_insertion_point(field_add:sylar.ns.QueryResponse.infos)
  return infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
QueryResponse::infos() const {
  // @@protoc_insertion_point(field_list:sylar.ns.QueryResponse.infos)
  return infos_;
}

// -------------------------------------------------------------------

// NotifyMessage

// repeated .sylar.ns.NodeInfo dels = 1;
inline int NotifyMessage::dels_size() const {
  return dels_.size();
}
inline void NotifyMessage::clear_dels() {
  dels_.Clear();
}
inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_dels(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.NotifyMessage.dels)
  return dels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
NotifyMessage::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.NotifyMessage.dels)
  return &dels_;
}
inline const ::sylar::ns::NodeInfo& NotifyMessage::dels(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.NotifyMessage.dels)
  return dels_.Get(index);
}
inline ::sylar::ns::NodeInfo* NotifyMessage::add_dels() {
  // @@protoc_insertion_point(field_add:sylar.ns.NotifyMessage.dels)
  return dels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
NotifyMessage::dels() const {
  // @@protoc_insertion_point(field_list:sylar.ns.NotifyMessage.dels)
  return dels_;
}

// repeated .sylar.ns.NodeInfo updates = 2;
inline int NotifyMessage::updates_size() const {
  return updates_.size();
}
inline void NotifyMessage::clear_updates() {
  updates_.Clear();
}
inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.NotifyMessage.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
NotifyMessage::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.NotifyMessage.updates)
  return &updates_;
}
inline const ::sylar::ns::NodeInfo& NotifyMessage::updates(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.NotifyMessage.updates)
  return updates_.Get(index);
}
inline ::sylar::ns::NodeInfo* NotifyMessage::add_updates() {
  // @@protoc_insertion_point(field_add:sylar.ns.NotifyMessage.updates)
  return updates_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
NotifyMessage::updates() const {
  // @@protoc_insertion_point(field_list:sylar.ns.NotifyMessage.updates)
  return updates_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns
}  // namespace sylar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto
